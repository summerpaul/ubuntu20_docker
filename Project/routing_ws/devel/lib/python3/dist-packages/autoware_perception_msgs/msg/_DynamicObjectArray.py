# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_perception_msgs/DynamicObjectArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_perception_msgs.msg
import geometry_msgs.msg
import std_msgs.msg
import uuid_msgs.msg

class DynamicObjectArray(genpy.Message):
  _md5sum = "a2e86adc1395807cc48f59093e5ef421"
  _type = "autoware_perception_msgs/DynamicObjectArray"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
DynamicObject[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: autoware_perception_msgs/DynamicObject
uuid_msgs/UniqueID id
Semantic semantic
State state
Shape shape
================================================================================
MSG: uuid_msgs/UniqueID
# A universally unique identifier (UUID).
#
#  http://en.wikipedia.org/wiki/Universally_unique_identifier
#  http://tools.ietf.org/html/rfc4122.html

uint8[16] uuid

================================================================================
MSG: autoware_perception_msgs/Semantic
uint8 UNKNOWN=0
uint8 CAR=1
uint8 TRUCK=2
uint8 BUS=3
uint8 BICYCLE=4
uint8 MOTORBIKE=5
uint8 PEDESTRIAN=6
uint8 ANIMAL=7
uint32 type
float64 confidence
================================================================================
MSG: autoware_perception_msgs/State
geometry_msgs/PoseWithCovariance pose_covariance
bool orientation_reliable
geometry_msgs/TwistWithCovariance twist_covariance
bool twist_reliable
geometry_msgs/AccelWithCovariance acceleration_covariance
bool acceleration_reliable
PredictedPath[] predicted_paths

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/AccelWithCovariance
# This expresses acceleration in free space with uncertainty.

Accel accel

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: autoware_perception_msgs/PredictedPath
geometry_msgs/PoseWithCovarianceStamped[] path
float64 confidence

================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: autoware_perception_msgs/Shape
uint8 BOUNDING_BOX=0
uint8 CYLINDER=1
uint8 POLYGON=2

uint8 type
geometry_msgs/Vector3 dimensions
geometry_msgs/Polygon footprint 

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['header','objects']
  _slot_types = ['std_msgs/Header','autoware_perception_msgs/DynamicObject[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicObjectArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v1 = val1.id
        _x = _v1.uuid
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_16B().pack(*_x))
        else:
          buff.write(_get_struct_16s().pack(_x))
        _v2 = val1.semantic
        _x = _v2
        buff.write(_get_struct_Id().pack(_x.type, _x.confidence))
        _v3 = val1.state
        _v4 = _v3.pose_covariance
        _v5 = _v4.pose
        _v6 = _v5.position
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v5.orientation
        _x = _v7
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v4.covariance))
        _x = _v3.orientation_reliable
        buff.write(_get_struct_B().pack(_x))
        _v8 = _v3.twist_covariance
        _v9 = _v8.twist
        _v10 = _v9.linear
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = _v9.angular
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v8.covariance))
        _x = _v3.twist_reliable
        buff.write(_get_struct_B().pack(_x))
        _v12 = _v3.acceleration_covariance
        _v13 = _v12.accel
        _v14 = _v13.linear
        _x = _v14
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v15 = _v13.angular
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v12.covariance))
        _x = _v3.acceleration_reliable
        buff.write(_get_struct_B().pack(_x))
        length = len(_v3.predicted_paths)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.predicted_paths:
          length = len(val3.path)
          buff.write(_struct_I.pack(length))
          for val4 in val3.path:
            _v16 = val4.header
            _x = _v16.seq
            buff.write(_get_struct_I().pack(_x))
            _v17 = _v16.stamp
            _x = _v17
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v16.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v18 = val4.pose
            _v19 = _v18.pose
            _v20 = _v19.position
            _x = _v20
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v21 = _v19.orientation
            _x = _v21
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_get_struct_36d().pack(*_v18.covariance))
          _x = val3.confidence
          buff.write(_get_struct_d().pack(_x))
        _v22 = val1.shape
        _x = _v22.type
        buff.write(_get_struct_B().pack(_x))
        _v23 = _v22.dimensions
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = _v22.footprint
        length = len(_v24.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v24.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = autoware_perception_msgs.msg.DynamicObject()
        _v25 = val1.id
        start = end
        end += 16
        _v25.uuid = str[start:end]
        _v26 = val1.semantic
        _x = _v26
        start = end
        end += 12
        (_x.type, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        _v27 = val1.state
        _v28 = _v27.pose_covariance
        _v29 = _v28.pose
        _v30 = _v29.position
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v31 = _v29.orientation
        _x = _v31
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v28.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v27.orientation_reliable,) = _get_struct_B().unpack(str[start:end])
        _v27.orientation_reliable = bool(_v27.orientation_reliable)
        _v32 = _v27.twist_covariance
        _v33 = _v32.twist
        _v34 = _v33.linear
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v35 = _v33.angular
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v32.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v27.twist_reliable,) = _get_struct_B().unpack(str[start:end])
        _v27.twist_reliable = bool(_v27.twist_reliable)
        _v36 = _v27.acceleration_covariance
        _v37 = _v36.accel
        _v38 = _v37.linear
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v39 = _v37.angular
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v36.covariance = _get_struct_36d().unpack(str[start:end])
        start = end
        end += 1
        (_v27.acceleration_reliable,) = _get_struct_B().unpack(str[start:end])
        _v27.acceleration_reliable = bool(_v27.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v27.predicted_paths = []
        for i in range(0, length):
          val3 = autoware_perception_msgs.msg.PredictedPath()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.path = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.PoseWithCovarianceStamped()
            _v40 = val4.header
            start = end
            end += 4
            (_v40.seq,) = _get_struct_I().unpack(str[start:end])
            _v41 = _v40.stamp
            _x = _v41
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v40.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v40.frame_id = str[start:end]
            _v42 = val4.pose
            _v43 = _v42.pose
            _v44 = _v43.position
            _x = _v44
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v45 = _v43.orientation
            _x = _v45
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v42.covariance = _get_struct_36d().unpack(str[start:end])
            val3.path.append(val4)
          start = end
          end += 8
          (val3.confidence,) = _get_struct_d().unpack(str[start:end])
          _v27.predicted_paths.append(val3)
        _v46 = val1.shape
        start = end
        end += 1
        (_v46.type,) = _get_struct_B().unpack(str[start:end])
        _v47 = _v46.dimensions
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v48 = _v46.footprint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v48.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v48.points.append(val4)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _v49 = val1.id
        _x = _v49.uuid
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(_get_struct_16B().pack(*_x))
        else:
          buff.write(_get_struct_16s().pack(_x))
        _v50 = val1.semantic
        _x = _v50
        buff.write(_get_struct_Id().pack(_x.type, _x.confidence))
        _v51 = val1.state
        _v52 = _v51.pose_covariance
        _v53 = _v52.pose
        _v54 = _v53.position
        _x = _v54
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v55 = _v53.orientation
        _x = _v55
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v52.covariance.tostring())
        _x = _v51.orientation_reliable
        buff.write(_get_struct_B().pack(_x))
        _v56 = _v51.twist_covariance
        _v57 = _v56.twist
        _v58 = _v57.linear
        _x = _v58
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v59 = _v57.angular
        _x = _v59
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v56.covariance.tostring())
        _x = _v51.twist_reliable
        buff.write(_get_struct_B().pack(_x))
        _v60 = _v51.acceleration_covariance
        _v61 = _v60.accel
        _v62 = _v61.linear
        _x = _v62
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v63 = _v61.angular
        _x = _v63
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v60.covariance.tostring())
        _x = _v51.acceleration_reliable
        buff.write(_get_struct_B().pack(_x))
        length = len(_v51.predicted_paths)
        buff.write(_struct_I.pack(length))
        for val3 in _v51.predicted_paths:
          length = len(val3.path)
          buff.write(_struct_I.pack(length))
          for val4 in val3.path:
            _v64 = val4.header
            _x = _v64.seq
            buff.write(_get_struct_I().pack(_x))
            _v65 = _v64.stamp
            _x = _v65
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v64.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v66 = val4.pose
            _v67 = _v66.pose
            _v68 = _v67.position
            _x = _v68
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v69 = _v67.orientation
            _x = _v69
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            buff.write(_v66.covariance.tostring())
          _x = val3.confidence
          buff.write(_get_struct_d().pack(_x))
        _v70 = val1.shape
        _x = _v70.type
        buff.write(_get_struct_B().pack(_x))
        _v71 = _v70.dimensions
        _x = _v71
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v72 = _v70.footprint
        length = len(_v72.points)
        buff.write(_struct_I.pack(length))
        for val4 in _v72.points:
          _x = val4
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = autoware_perception_msgs.msg.DynamicObject()
        _v73 = val1.id
        start = end
        end += 16
        _v73.uuid = str[start:end]
        _v74 = val1.semantic
        _x = _v74
        start = end
        end += 12
        (_x.type, _x.confidence,) = _get_struct_Id().unpack(str[start:end])
        _v75 = val1.state
        _v76 = _v75.pose_covariance
        _v77 = _v76.pose
        _v78 = _v77.position
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v79 = _v77.orientation
        _x = _v79
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        start = end
        end += 288
        _v76.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v75.orientation_reliable,) = _get_struct_B().unpack(str[start:end])
        _v75.orientation_reliable = bool(_v75.orientation_reliable)
        _v80 = _v75.twist_covariance
        _v81 = _v80.twist
        _v82 = _v81.linear
        _x = _v82
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v83 = _v81.angular
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v80.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v75.twist_reliable,) = _get_struct_B().unpack(str[start:end])
        _v75.twist_reliable = bool(_v75.twist_reliable)
        _v84 = _v75.acceleration_covariance
        _v85 = _v84.accel
        _v86 = _v85.linear
        _x = _v86
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v87 = _v85.angular
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 288
        _v84.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
        start = end
        end += 1
        (_v75.acceleration_reliable,) = _get_struct_B().unpack(str[start:end])
        _v75.acceleration_reliable = bool(_v75.acceleration_reliable)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v75.predicted_paths = []
        for i in range(0, length):
          val3 = autoware_perception_msgs.msg.PredictedPath()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.path = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.PoseWithCovarianceStamped()
            _v88 = val4.header
            start = end
            end += 4
            (_v88.seq,) = _get_struct_I().unpack(str[start:end])
            _v89 = _v88.stamp
            _x = _v89
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v88.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v88.frame_id = str[start:end]
            _v90 = val4.pose
            _v91 = _v90.pose
            _v92 = _v91.position
            _x = _v92
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v93 = _v91.orientation
            _x = _v93
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 288
            _v90.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
            val3.path.append(val4)
          start = end
          end += 8
          (val3.confidence,) = _get_struct_d().unpack(str[start:end])
          _v75.predicted_paths.append(val3)
        _v94 = val1.shape
        start = end
        end += 1
        (_v94.type,) = _get_struct_B().unpack(str[start:end])
        _v95 = _v94.dimensions
        _x = _v95
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v96 = _v94.footprint
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v96.points = []
        for i in range(0, length):
          val4 = geometry_msgs.msg.Point32()
          _x = val4
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v96.points.append(val4)
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_16s = None
def _get_struct_16s():
    global _struct_16s
    if _struct_16s is None:
        _struct_16s = struct.Struct("<16s")
    return _struct_16s
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d

// Generated by gencpp from file autoware_planning_msgs/PathPointWithLaneId.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PLANNING_MSGS_MESSAGE_PATHPOINTWITHLANEID_H
#define AUTOWARE_PLANNING_MSGS_MESSAGE_PATHPOINTWITHLANEID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <autoware_planning_msgs/PathPoint.h>

namespace autoware_planning_msgs
{
template <class ContainerAllocator>
struct PathPointWithLaneId_
{
  typedef PathPointWithLaneId_<ContainerAllocator> Type;

  PathPointWithLaneId_()
    : point()
    , lane_ids()  {
    }
  PathPointWithLaneId_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , lane_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::autoware_planning_msgs::PathPoint_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _lane_ids_type;
  _lane_ids_type lane_ids;





  typedef boost::shared_ptr< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> const> ConstPtr;

}; // struct PathPointWithLaneId_

typedef ::autoware_planning_msgs::PathPointWithLaneId_<std::allocator<void> > PathPointWithLaneId;

typedef boost::shared_ptr< ::autoware_planning_msgs::PathPointWithLaneId > PathPointWithLaneIdPtr;
typedef boost::shared_ptr< ::autoware_planning_msgs::PathPointWithLaneId const> PathPointWithLaneIdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.lane_ids == rhs.lane_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76ff2694b5d561459dd969c578f7a19d";
  }

  static const char* value(const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76ff2694b5d56145ULL;
  static const uint64_t static_value2 = 0x9dd969c578f7a19dULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_planning_msgs/PathPointWithLaneId";
  }

  static const char* value(const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_planning_msgs/PathPoint point\n"
"int64[] lane_ids\n"
"================================================================================\n"
"MSG: autoware_planning_msgs/PathPoint\n"
"uint8 REFFERENCE=0\n"
"uint8 FIXED=1\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"uint8 type\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.lane_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPointWithLaneId_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "lane_ids[]" << std::endl;
    for (size_t i = 0; i < v.lane_ids.size(); ++i)
    {
      s << indent << "  lane_ids[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.lane_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PLANNING_MSGS_MESSAGE_PATHPOINTWITHLANEID_H

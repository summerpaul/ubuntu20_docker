// Generated by gencpp from file autoware_planning_msgs/Scenario.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PLANNING_MSGS_MESSAGE_SCENARIO_H
#define AUTOWARE_PLANNING_MSGS_MESSAGE_SCENARIO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_planning_msgs
{
template <class ContainerAllocator>
struct Scenario_
{
  typedef Scenario_<ContainerAllocator> Type;

  Scenario_()
    : current_scenario()
    , activating_scenarios()  {
    }
  Scenario_(const ContainerAllocator& _alloc)
    : current_scenario(_alloc)
    , activating_scenarios(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _current_scenario_type;
  _current_scenario_type current_scenario;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _activating_scenarios_type;
  _activating_scenarios_type activating_scenarios;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Empty)
  #undef Empty
#endif
#if defined(_WIN32) && defined(LaneDriving)
  #undef LaneDriving
#endif
#if defined(_WIN32) && defined(Parking)
  #undef Parking
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Empty;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LaneDriving;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Parking;

  typedef boost::shared_ptr< ::autoware_planning_msgs::Scenario_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_planning_msgs::Scenario_<ContainerAllocator> const> ConstPtr;

}; // struct Scenario_

typedef ::autoware_planning_msgs::Scenario_<std::allocator<void> > Scenario;

typedef boost::shared_ptr< ::autoware_planning_msgs::Scenario > ScenarioPtr;
typedef boost::shared_ptr< ::autoware_planning_msgs::Scenario const> ScenarioConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Scenario_<ContainerAllocator>::Empty =
        
          "Empty"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Scenario_<ContainerAllocator>::LaneDriving =
        
          "LaneDriving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Scenario_<ContainerAllocator>::Parking =
        
          "Parking"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_planning_msgs::Scenario_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_planning_msgs::Scenario_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::Scenario_<ContainerAllocator2> & rhs)
{
  return lhs.current_scenario == rhs.current_scenario &&
    lhs.activating_scenarios == rhs.activating_scenarios;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_planning_msgs::Scenario_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::Scenario_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::Scenario_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::Scenario_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::Scenario_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e42802502551bee186fe00316732f56";
  }

  static const char* value(const ::autoware_planning_msgs::Scenario_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e42802502551beeULL;
  static const uint64_t static_value2 = 0x186fe00316732f56ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_planning_msgs/Scenario";
  }

  static const char* value(const ::autoware_planning_msgs::Scenario_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Empty=Empty\n"
"string LaneDriving=LaneDriving\n"
"string Parking=Parking\n"
"\n"
"string current_scenario\n"
"string[] activating_scenarios\n"
;
  }

  static const char* value(const ::autoware_planning_msgs::Scenario_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_scenario);
      stream.next(m.activating_scenarios);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Scenario_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_planning_msgs::Scenario_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_planning_msgs::Scenario_<ContainerAllocator>& v)
  {
    s << indent << "current_scenario: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.current_scenario);
    s << indent << "activating_scenarios[]" << std::endl;
    for (size_t i = 0; i < v.activating_scenarios.size(); ++i)
    {
      s << indent << "  activating_scenarios[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.activating_scenarios[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PLANNING_MSGS_MESSAGE_SCENARIO_H

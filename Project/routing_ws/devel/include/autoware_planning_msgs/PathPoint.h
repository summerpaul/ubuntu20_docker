// Generated by gencpp from file autoware_planning_msgs/PathPoint.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PLANNING_MSGS_MESSAGE_PATHPOINT_H
#define AUTOWARE_PLANNING_MSGS_MESSAGE_PATHPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace autoware_planning_msgs
{
template <class ContainerAllocator>
struct PathPoint_
{
  typedef PathPoint_<ContainerAllocator> Type;

  PathPoint_()
    : pose()
    , twist()
    , type(0)  {
    }
  PathPoint_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , twist(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(REFFERENCE)
  #undef REFFERENCE
#endif
#if defined(_WIN32) && defined(FIXED)
  #undef FIXED
#endif

  enum {
    REFFERENCE = 0u,
    FIXED = 1u,
  };


  typedef boost::shared_ptr< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> const> ConstPtr;

}; // struct PathPoint_

typedef ::autoware_planning_msgs::PathPoint_<std::allocator<void> > PathPoint;

typedef boost::shared_ptr< ::autoware_planning_msgs::PathPoint > PathPointPtr;
typedef boost::shared_ptr< ::autoware_planning_msgs::PathPoint const> PathPointConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_planning_msgs::PathPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_planning_msgs::PathPoint_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::PathPoint_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_planning_msgs::PathPoint_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::PathPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e48252d5946ba8f4e2250819f89ca6a2";
  }

  static const char* value(const ::autoware_planning_msgs::PathPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe48252d5946ba8f4ULL;
  static const uint64_t static_value2 = 0xe2250819f89ca6a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_planning_msgs/PathPoint";
  }

  static const char* value(const ::autoware_planning_msgs::PathPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 REFFERENCE=0\n"
"uint8 FIXED=1\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"uint8 type\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autoware_planning_msgs::PathPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_planning_msgs::PathPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_planning_msgs::PathPoint_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PLANNING_MSGS_MESSAGE_PATHPOINT_H

// Generated by gencpp from file autoware_planning_msgs/PathWithLaneId.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PLANNING_MSGS_MESSAGE_PATHWITHLANEID_H
#define AUTOWARE_PLANNING_MSGS_MESSAGE_PATHWITHLANEID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <autoware_planning_msgs/PathPointWithLaneId.h>
#include <nav_msgs/OccupancyGrid.h>

namespace autoware_planning_msgs
{
template <class ContainerAllocator>
struct PathWithLaneId_
{
  typedef PathWithLaneId_<ContainerAllocator> Type;

  PathWithLaneId_()
    : header()
    , points()
    , drivable_area()  {
    }
  PathWithLaneId_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(_alloc)
    , drivable_area(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _drivable_area_type;
  _drivable_area_type drivable_area;





  typedef boost::shared_ptr< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> const> ConstPtr;

}; // struct PathWithLaneId_

typedef ::autoware_planning_msgs::PathWithLaneId_<std::allocator<void> > PathWithLaneId;

typedef boost::shared_ptr< ::autoware_planning_msgs::PathWithLaneId > PathWithLaneIdPtr;
typedef boost::shared_ptr< ::autoware_planning_msgs::PathWithLaneId const> PathWithLaneIdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points &&
    lhs.drivable_area == rhs.drivable_area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator1> & lhs, const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_planning_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96253f4cd9f527a5fc96a075341910d5";
  }

  static const char* value(const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96253f4cd9f527a5ULL;
  static const uint64_t static_value2 = 0xfc96a075341910d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_planning_msgs/PathWithLaneId";
  }

  static const char* value(const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"autoware_planning_msgs/PathPointWithLaneId[] points\n"
"nav_msgs/OccupancyGrid drivable_area\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: autoware_planning_msgs/PathPointWithLaneId\n"
"autoware_planning_msgs/PathPoint point\n"
"int64[] lane_ids\n"
"================================================================================\n"
"MSG: autoware_planning_msgs/PathPoint\n"
"uint8 REFFERENCE=0\n"
"uint8 FIXED=1\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"uint8 type\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: nav_msgs/OccupancyGrid\n"
"# This represents a 2-D grid map, in which each cell represents the probability of\n"
"# occupancy.\n"
"\n"
"Header header \n"
"\n"
"#MetaData for the map\n"
"MapMetaData info\n"
"\n"
"# The map data, in row-major order, starting with (0,0).  Occupancy\n"
"# probabilities are in the range [0,100].  Unknown is -1.\n"
"int8[] data\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/MapMetaData\n"
"# This hold basic information about the characterists of the OccupancyGrid\n"
"\n"
"# The time at which the map was loaded\n"
"time map_load_time\n"
"# The map resolution [m/cell]\n"
"float32 resolution\n"
"# Map width [cells]\n"
"uint32 width\n"
"# Map height [cells]\n"
"uint32 height\n"
"# The origin of the map [m, m, rad].  This is the real-world pose of the\n"
"# cell (0,0) in the map.\n"
"geometry_msgs/Pose origin\n"
;
  }

  static const char* value(const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
      stream.next(m.drivable_area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathWithLaneId_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_planning_msgs::PathWithLaneId_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autoware_planning_msgs::PathPointWithLaneId_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "drivable_area: ";
    s << std::endl;
    Printer< ::nav_msgs::OccupancyGrid_<ContainerAllocator> >::stream(s, indent + "  ", v.drivable_area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PLANNING_MSGS_MESSAGE_PATHWITHLANEID_H

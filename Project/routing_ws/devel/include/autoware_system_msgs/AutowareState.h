// Generated by gencpp from file autoware_system_msgs/AutowareState.msg
// DO NOT EDIT!


#ifndef AUTOWARE_SYSTEM_MSGS_MESSAGE_AUTOWARESTATE_H
#define AUTOWARE_SYSTEM_MSGS_MESSAGE_AUTOWARESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autoware_system_msgs
{
template <class ContainerAllocator>
struct AutowareState_
{
  typedef AutowareState_<ContainerAllocator> Type;

  AutowareState_()
    : state()
    , msg()  {
    }
  AutowareState_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  _msg_type msg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Error)
  #undef Error
#endif
#if defined(_WIN32) && defined(InitializingVehicle)
  #undef InitializingVehicle
#endif
#if defined(_WIN32) && defined(WaitingForRoute)
  #undef WaitingForRoute
#endif
#if defined(_WIN32) && defined(Planning)
  #undef Planning
#endif
#if defined(_WIN32) && defined(WaitingForEngage)
  #undef WaitingForEngage
#endif
#if defined(_WIN32) && defined(Driving)
  #undef Driving
#endif
#if defined(_WIN32) && defined(ArrivedGoal)
  #undef ArrivedGoal
#endif
#if defined(_WIN32) && defined(FailedToArriveGoal)
  #undef FailedToArriveGoal
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Error;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  InitializingVehicle;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  WaitingForRoute;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Planning;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  WaitingForEngage;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Driving;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ArrivedGoal;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  FailedToArriveGoal;

  typedef boost::shared_ptr< ::autoware_system_msgs::AutowareState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_system_msgs::AutowareState_<ContainerAllocator> const> ConstPtr;

}; // struct AutowareState_

typedef ::autoware_system_msgs::AutowareState_<std::allocator<void> > AutowareState;

typedef boost::shared_ptr< ::autoware_system_msgs::AutowareState > AutowareStatePtr;
typedef boost::shared_ptr< ::autoware_system_msgs::AutowareState const> AutowareStateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::Error =
        
          "Error"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::InitializingVehicle =
        
          "InitializingVehicle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::WaitingForRoute =
        
          "WaitingForRoute"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::Planning =
        
          "Planning"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::WaitingForEngage =
        
          "WaitingForEngage"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::Driving =
        
          "Driving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::ArrivedGoal =
        
          "ArrivedGoal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      AutowareState_<ContainerAllocator>::FailedToArriveGoal =
        
          "FailedToArriveGoal"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_system_msgs::AutowareState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_system_msgs::AutowareState_<ContainerAllocator1> & lhs, const ::autoware_system_msgs::AutowareState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_system_msgs::AutowareState_<ContainerAllocator1> & lhs, const ::autoware_system_msgs::AutowareState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_system_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_system_msgs::AutowareState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_system_msgs::AutowareState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_system_msgs::AutowareState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "856c545234d0e590924921f24d06b690";
  }

  static const char* value(const ::autoware_system_msgs::AutowareState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x856c545234d0e590ULL;
  static const uint64_t static_value2 = 0x924921f24d06b690ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_system_msgs/AutowareState";
  }

  static const char* value(const ::autoware_system_msgs::AutowareState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Error=Error\n"
"string InitializingVehicle=InitializingVehicle\n"
"string WaitingForRoute=WaitingForRoute\n"
"string Planning=Planning\n"
"string WaitingForEngage=WaitingForEngage\n"
"string Driving=Driving\n"
"string ArrivedGoal=ArrivedGoal\n"
"string FailedToArriveGoal=FailedToArriveGoal\n"
"\n"
"string state\n"
"string msg\n"
;
  }

  static const char* value(const ::autoware_system_msgs::AutowareState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AutowareState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_system_msgs::AutowareState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_system_msgs::AutowareState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_SYSTEM_MSGS_MESSAGE_AUTOWARESTATE_H

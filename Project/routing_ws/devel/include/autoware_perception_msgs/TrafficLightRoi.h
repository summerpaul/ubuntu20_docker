// Generated by gencpp from file autoware_perception_msgs/TrafficLightRoi.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PERCEPTION_MSGS_MESSAGE_TRAFFICLIGHTROI_H
#define AUTOWARE_PERCEPTION_MSGS_MESSAGE_TRAFFICLIGHTROI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/RegionOfInterest.h>

namespace autoware_perception_msgs
{
template <class ContainerAllocator>
struct TrafficLightRoi_
{
  typedef TrafficLightRoi_<ContainerAllocator> Type;

  TrafficLightRoi_()
    : roi()
    , id(0)  {
    }
  TrafficLightRoi_(const ContainerAllocator& _alloc)
    : roi(_alloc)
    , id(0)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _roi_type;
  _roi_type roi;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightRoi_

typedef ::autoware_perception_msgs::TrafficLightRoi_<std::allocator<void> > TrafficLightRoi;

typedef boost::shared_ptr< ::autoware_perception_msgs::TrafficLightRoi > TrafficLightRoiPtr;
typedef boost::shared_ptr< ::autoware_perception_msgs::TrafficLightRoi const> TrafficLightRoiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator1> & lhs, const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator2> & rhs)
{
  return lhs.roi == rhs.roi &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator1> & lhs, const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f90e3f894aaf0e609e95299d63f28815";
  }

  static const char* value(const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf90e3f894aaf0e60ULL;
  static const uint64_t static_value2 = 0x9e95299d63f28815ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_perception_msgs/TrafficLightRoi";
  }

  static const char* value(const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/RegionOfInterest roi\n"
"int32 id\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roi);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightRoi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_perception_msgs::TrafficLightRoi_<ContainerAllocator>& v)
  {
    s << indent << "roi: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.roi);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PERCEPTION_MSGS_MESSAGE_TRAFFICLIGHTROI_H

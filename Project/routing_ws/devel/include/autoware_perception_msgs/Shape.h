// Generated by gencpp from file autoware_perception_msgs/Shape.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PERCEPTION_MSGS_MESSAGE_SHAPE_H
#define AUTOWARE_PERCEPTION_MSGS_MESSAGE_SHAPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Polygon.h>

namespace autoware_perception_msgs
{
template <class ContainerAllocator>
struct Shape_
{
  typedef Shape_<ContainerAllocator> Type;

  Shape_()
    : type(0)
    , dimensions()
    , footprint()  {
    }
  Shape_(const ContainerAllocator& _alloc)
    : type(0)
    , dimensions(_alloc)
    , footprint(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dimensions_type;
  _dimensions_type dimensions;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _footprint_type;
  _footprint_type footprint;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BOUNDING_BOX)
  #undef BOUNDING_BOX
#endif
#if defined(_WIN32) && defined(CYLINDER)
  #undef CYLINDER
#endif
#if defined(_WIN32) && defined(POLYGON)
  #undef POLYGON
#endif

  enum {
    BOUNDING_BOX = 0u,
    CYLINDER = 1u,
    POLYGON = 2u,
  };


  typedef boost::shared_ptr< ::autoware_perception_msgs::Shape_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_perception_msgs::Shape_<ContainerAllocator> const> ConstPtr;

}; // struct Shape_

typedef ::autoware_perception_msgs::Shape_<std::allocator<void> > Shape;

typedef boost::shared_ptr< ::autoware_perception_msgs::Shape > ShapePtr;
typedef boost::shared_ptr< ::autoware_perception_msgs::Shape const> ShapeConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_perception_msgs::Shape_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_perception_msgs::Shape_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_perception_msgs::Shape_<ContainerAllocator1> & lhs, const ::autoware_perception_msgs::Shape_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.dimensions == rhs.dimensions &&
    lhs.footprint == rhs.footprint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_perception_msgs::Shape_<ContainerAllocator1> & lhs, const ::autoware_perception_msgs::Shape_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_perception_msgs::Shape_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_perception_msgs::Shape_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_perception_msgs::Shape_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d17401cc8cf3df1a70f0cb6ccdc143a";
  }

  static const char* value(const ::autoware_perception_msgs::Shape_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d17401cc8cf3df1ULL;
  static const uint64_t static_value2 = 0xa70f0cb6ccdc143aULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_perception_msgs/Shape";
  }

  static const char* value(const ::autoware_perception_msgs::Shape_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 BOUNDING_BOX=0\n"
"uint8 CYLINDER=1\n"
"uint8 POLYGON=2\n"
"\n"
"uint8 type\n"
"geometry_msgs/Vector3 dimensions\n"
"geometry_msgs/Polygon footprint \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::autoware_perception_msgs::Shape_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.dimensions);
      stream.next(m.footprint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Shape_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_perception_msgs::Shape_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_perception_msgs::Shape_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "dimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.dimensions);
    s << indent << "footprint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.footprint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PERCEPTION_MSGS_MESSAGE_SHAPE_H

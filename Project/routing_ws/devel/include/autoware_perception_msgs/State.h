// Generated by gencpp from file autoware_perception_msgs/State.msg
// DO NOT EDIT!


#ifndef AUTOWARE_PERCEPTION_MSGS_MESSAGE_STATE_H
#define AUTOWARE_PERCEPTION_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovariance.h>
#include <geometry_msgs/TwistWithCovariance.h>
#include <geometry_msgs/AccelWithCovariance.h>
#include <autoware_perception_msgs/PredictedPath.h>

namespace autoware_perception_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : pose_covariance()
    , orientation_reliable(false)
    , twist_covariance()
    , twist_reliable(false)
    , acceleration_covariance()
    , acceleration_reliable(false)
    , predicted_paths()  {
    }
  State_(const ContainerAllocator& _alloc)
    : pose_covariance(_alloc)
    , orientation_reliable(false)
    , twist_covariance(_alloc)
    , twist_reliable(false)
    , acceleration_covariance(_alloc)
    , acceleration_reliable(false)
    , predicted_paths(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseWithCovariance_<ContainerAllocator>  _pose_covariance_type;
  _pose_covariance_type pose_covariance;

   typedef uint8_t _orientation_reliable_type;
  _orientation_reliable_type orientation_reliable;

   typedef  ::geometry_msgs::TwistWithCovariance_<ContainerAllocator>  _twist_covariance_type;
  _twist_covariance_type twist_covariance;

   typedef uint8_t _twist_reliable_type;
  _twist_reliable_type twist_reliable;

   typedef  ::geometry_msgs::AccelWithCovariance_<ContainerAllocator>  _acceleration_covariance_type;
  _acceleration_covariance_type acceleration_covariance;

   typedef uint8_t _acceleration_reliable_type;
  _acceleration_reliable_type acceleration_reliable;

   typedef std::vector< ::autoware_perception_msgs::PredictedPath_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::autoware_perception_msgs::PredictedPath_<ContainerAllocator> >::other >  _predicted_paths_type;
  _predicted_paths_type predicted_paths;





  typedef boost::shared_ptr< ::autoware_perception_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_perception_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::autoware_perception_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::autoware_perception_msgs::State > StatePtr;
typedef boost::shared_ptr< ::autoware_perception_msgs::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_perception_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_perception_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_perception_msgs::State_<ContainerAllocator1> & lhs, const ::autoware_perception_msgs::State_<ContainerAllocator2> & rhs)
{
  return lhs.pose_covariance == rhs.pose_covariance &&
    lhs.orientation_reliable == rhs.orientation_reliable &&
    lhs.twist_covariance == rhs.twist_covariance &&
    lhs.twist_reliable == rhs.twist_reliable &&
    lhs.acceleration_covariance == rhs.acceleration_covariance &&
    lhs.acceleration_reliable == rhs.acceleration_reliable &&
    lhs.predicted_paths == rhs.predicted_paths;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_perception_msgs::State_<ContainerAllocator1> & lhs, const ::autoware_perception_msgs::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_perception_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_perception_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_perception_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_perception_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_perception_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_perception_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_perception_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adee6436156f6f80a5204905e49c421d";
  }

  static const char* value(const ::autoware_perception_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadee6436156f6f80ULL;
  static const uint64_t static_value2 = 0xa5204905e49c421dULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_perception_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_perception_msgs/State";
  }

  static const char* value(const ::autoware_perception_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_perception_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseWithCovariance pose_covariance\n"
"bool orientation_reliable\n"
"geometry_msgs/TwistWithCovariance twist_covariance\n"
"bool twist_reliable\n"
"geometry_msgs/AccelWithCovariance acceleration_covariance\n"
"bool acceleration_reliable\n"
"PredictedPath[] predicted_paths\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/AccelWithCovariance\n"
"# This expresses acceleration in free space with uncertainty.\n"
"\n"
"Accel accel\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: autoware_perception_msgs/PredictedPath\n"
"geometry_msgs/PoseWithCovarianceStamped[] path\n"
"float64 confidence\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::autoware_perception_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_perception_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_covariance);
      stream.next(m.orientation_reliable);
      stream.next(m.twist_covariance);
      stream.next(m.twist_reliable);
      stream.next(m.acceleration_covariance);
      stream.next(m.acceleration_reliable);
      stream.next(m.predicted_paths);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_perception_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_perception_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "pose_covariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_covariance);
    s << indent << "orientation_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.orientation_reliable);
    s << indent << "twist_covariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::TwistWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.twist_covariance);
    s << indent << "twist_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.twist_reliable);
    s << indent << "acceleration_covariance: ";
    s << std::endl;
    Printer< ::geometry_msgs::AccelWithCovariance_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration_covariance);
    s << indent << "acceleration_reliable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acceleration_reliable);
    s << indent << "predicted_paths[]" << std::endl;
    for (size_t i = 0; i < v.predicted_paths.size(); ++i)
    {
      s << indent << "  predicted_paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autoware_perception_msgs::PredictedPath_<ContainerAllocator> >::stream(s, indent + "    ", v.predicted_paths[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_PERCEPTION_MSGS_MESSAGE_STATE_H

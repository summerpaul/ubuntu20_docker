// Generated by gencpp from file autoware_vehicle_msgs/RawVehicleCommand.msg
// DO NOT EDIT!


#ifndef AUTOWARE_VEHICLE_MSGS_MESSAGE_RAWVEHICLECOMMAND_H
#define AUTOWARE_VEHICLE_MSGS_MESSAGE_RAWVEHICLECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <autoware_vehicle_msgs/RawControlCommand.h>
#include <autoware_vehicle_msgs/Shift.h>

namespace autoware_vehicle_msgs
{
template <class ContainerAllocator>
struct RawVehicleCommand_
{
  typedef RawVehicleCommand_<ContainerAllocator> Type;

  RawVehicleCommand_()
    : header()
    , control()
    , shift()
    , emergency(0)  {
    }
  RawVehicleCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control(_alloc)
    , shift(_alloc)
    , emergency(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::autoware_vehicle_msgs::RawControlCommand_<ContainerAllocator>  _control_type;
  _control_type control;

   typedef  ::autoware_vehicle_msgs::Shift_<ContainerAllocator>  _shift_type;
  _shift_type shift;

   typedef int32_t _emergency_type;
  _emergency_type emergency;





  typedef boost::shared_ptr< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> const> ConstPtr;

}; // struct RawVehicleCommand_

typedef ::autoware_vehicle_msgs::RawVehicleCommand_<std::allocator<void> > RawVehicleCommand;

typedef boost::shared_ptr< ::autoware_vehicle_msgs::RawVehicleCommand > RawVehicleCommandPtr;
typedef boost::shared_ptr< ::autoware_vehicle_msgs::RawVehicleCommand const> RawVehicleCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator1> & lhs, const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.control == rhs.control &&
    lhs.shift == rhs.shift &&
    lhs.emergency == rhs.emergency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator1> & lhs, const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autoware_vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2dfe6af16f948ae41186c0fd4b4d9275";
  }

  static const char* value(const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2dfe6af16f948ae4ULL;
  static const uint64_t static_value2 = 0x1186c0fd4b4d9275ULL;
};

template<class ContainerAllocator>
struct DataType< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autoware_vehicle_msgs/RawVehicleCommand";
  }

  static const char* value(const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"autoware_vehicle_msgs/RawControlCommand control\n"
"autoware_vehicle_msgs/Shift shift\n"
"int32 emergency\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: autoware_vehicle_msgs/RawControlCommand\n"
"float64 steering_angle\n"
"float64 steering_angle_velocity\n"
"float64 throttle\n"
"float64 brake\n"
"================================================================================\n"
"MSG: autoware_vehicle_msgs/Shift\n"
"uint8 NONE=0\n"
"uint8 PARKING=1\n"
"uint8 REVERSE=2\n"
"uint8 NEUTRAL=3\n"
"uint8 DRIVE=4\n"
"uint8 LOW=5\n"
"\n"
"int32 data\n"
;
  }

  static const char* value(const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control);
      stream.next(m.shift);
      stream.next(m.emergency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawVehicleCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autoware_vehicle_msgs::RawVehicleCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control: ";
    s << std::endl;
    Printer< ::autoware_vehicle_msgs::RawControlCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.control);
    s << indent << "shift: ";
    s << std::endl;
    Printer< ::autoware_vehicle_msgs::Shift_<ContainerAllocator> >::stream(s, indent + "  ", v.shift);
    s << indent << "emergency: ";
    Printer<int32_t>::stream(s, indent + "  ", v.emergency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOWARE_VEHICLE_MSGS_MESSAGE_RAWVEHICLECOMMAND_H
